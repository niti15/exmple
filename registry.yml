---

- name: run the playbook tasks on the localhost
  hosts: localhost
  become: yes
  vars:
    do_token:  "{{ hostvars['localhost']['dropletoken'] }}"
  tasks:

  - name: ensure ssh key exists
    user: >
      name={{ ansible_user_id }}
      generate_ssh_key=yes
      ssh_key_file=.ssh/id_rsa
          
  - name: ensure key exists at DigitalOcean
    digital_ocean: >
      state=present
      command=ssh
      name=justOps_key
      ssh_pub_key={{ lookup('file', '~/.ssh/id_rsa.pub') }}
      api_token={{ do_token }}
    register: my_ssh_key

  - name: ensure droplet one exists
    digital_ocean: >
      state=present
      command=droplet
      name="{{ hostvars['localhost']['job'] }}-registry"
      size_id=2gb
      region_id=sgp1
      image_id=ubuntu-16-04-x64
      ssh_key_ids={{ my_ssh_key.ssh_key.id }}
      api_token={{ do_token }}
    register: droplet_one

  - name: add a host with a non-standard port local to your machines
    add_host:
      hostname: new_host
      ansible_host: "{{ droplet_one.droplet.ip_address }}"
      ansible_user: root
        # This is reliant on sshpass being installed
      # ansible_password: root

  - name: Add IP address of all hosts to all hosts
    lineinfile:
      dest: /etc/ansible/hosts
      line: "[new_host] \n {{ hostvars['new_host'].ansible_host }} ansible_user=root"
      state: present
    with_items: "{{ groups.all }}"  

  - debug: msg="IP is {{ droplet_one.droplet.ip_address }}"  

-

  # Target: where our play will run and options it will run with
  hosts: new_host
  become: yes
  remote_user: root
  gather_facts: no
  pre_tasks:
    - name: 'install python2'
      raw: sudo apt-get -y install python-simplejson

  # Task: the list of tasks that will be executed within the play, this section
  # can also be used for pre and post tasks
  tasks:
    - ping:
    - name: ensure repository key is installed
      apt_key:
        id: "58118E89F3A912897C070ADBF76221572C52609D"
        keyserver: "hkp://p80.pool.sks-keyservers.net:80"
        state: present

    - name: ensure docker registry is available
      # For Ubuntu 14.04 LTS, use this repository:
      # apt_repository: repo='deb https://apt.dockerproject.org/repo ubuntu-trusty main' state=present
      # For Ubuntu 16.04 LTS, use this repo instead:
      apt_repository: repo='deb https://apt.dockerproject.org/repo ubuntu-xenial main' state=present

    - name: ensure docker and dependencies are installed
      apt: name=docker-engine update_cache=yes

    # Uncomment the following to enable insecure registries with Docker
    #- name: ensure docker can use insecure registries in 10.11.0.0/16
    #  lineinfile: "dest=/etc/default/docker regexp=^DOCKER_OPTS line=DOCKER_OPTS='--insecure-registry 10.11.0.0/16'"

    - service: name=docker state=restarted

    - name: Install latest version of "openjdk-6-jdk" ignoring "install-recommends"
      apt:
        name: python-pip
        state: latest
        install_recommends: yes

    - pip:
       name: docker

    - name: Create an registry container from the new registry:2 docker image
      docker_container:
        name: registry
        image: registry:2
        ports:
          - "5000:5000"
        state: started         
  # Three dots indicate the end of a YAML document
... 
